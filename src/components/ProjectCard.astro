---
import {Octokit} from "octokit";
import type {
  GetRepositoryResponse,
  ListRepositoryCommitsResponse,
  ListRepositoryContributorsResponse,
} from "../helpers/githubTypes";
import {getRandomNumber, getMockRepositoryResponse} from "../mocks/projects";
import {isMockModeEnabled} from "../mocks/common";
import {
  FiExternalLink,
  FiGitCommit,
  FiGithub,
  FiStar,
  FiTag,
} from "react-icons/fi";

interface Props {
  title: string;
  repoUrl: string;
  demoUrl?: string;
  description?: string;
}

interface Project {
  description: string;
  commitCount: number;
  stars?: number;
  forks?: number;
  language?: string;
  createdAt?: string;
  tags?: string[];
  license?: string;
}

const {title, repoUrl, demoUrl, description} = Astro.props;

const projectName = repoUrl.split("/").pop() ?? "";

const octokit = new Octokit();

const repo = isMockModeEnabled
  ? getMockRepositoryResponse()
  : ((await octokit.request(
      `GET /repos/loupeznik/${projectName}`
    )) as GetRepositoryResponse);

const contributors: ListRepositoryContributorsResponse =
  {} as ListRepositoryContributorsResponse;

if (!isMockModeEnabled) {
  const contributorsResponse = await octokit.request(
    `GET /repos/loupeznik/${projectName}/contributors?per_page=100&page=1`
  );

  contributors.data = contributorsResponse.data;
}

let commits = isMockModeEnabled ? getRandomNumber() : 0;

contributors?.data?.forEach((contributor) => {
  commits += contributor.contributions;
});

const project: Project = {
  description: description ?? repo.data?.description ?? "",
  stars: repo.data?.stargazers_count ?? 0,
  forks: repo.data?.forks_count ?? 0,
  commitCount: commits,
  language: repo.data?.language ?? "",
  createdAt: repo.data?.created_at,
  tags: repo.data?.topics,
  license: repo.data?.license?.spdx_id ?? "No license available",
};
---

<li>
  <div class="card">
    <h2>{title}</h2>
    <p>{project.description}</p>
    <div>
      <p class="icon-wrapper">Stars: {project.stars} <FiStar /></p>
      <p class="icon-wrapper">Forks: {project.forks}</p>
      <p class="icon-wrapper">
        Commits: {project.commitCount}
        <FiGitCommit />
      </p>
      <p class="icon-wrapper">Language: {project.language}</p>
      <p>
        Created at: {
          project.createdAt !== undefined &&
            new Date(Date.parse(project.createdAt)).toLocaleDateString()
        }
      </p>
      <p>License: {project.license}</p>
    </div>

    <div class="link-wrapper">
      <span class="icon-wrapper">
        <a href={repoUrl} target="_blank">
          <FiGithub />
          <span>Repo</span>
        </a>
      </span>
      {
        demoUrl !== undefined && demoUrl !== "" && (
          <span class="icon-wrapper">
            <a href={demoUrl} target="_blank">
              <FiExternalLink />
              <span>Demo</span>
            </a>
          </span>
        )
      }
    </div>

    <div class="tag-wrapper">
      {
        project.tags?.map((tag) => (
          <span class="tag">
            <FiTag /> {tag}
          </span>
        ))
      }
    </div>
  </div>
</li>

<style>
  .tag-wrapper {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row-reverse;
    place-self: flex-end;
    margin-top: 1rem;
  }

  .tag {
    background: #13151a 0% 0% no-repeat padding-box;
    color: var(--color-white);
    padding: 0.5rem;
    border-radius: 0.5rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    font-size: 14px;
  }

  h2 {
    text-align: center;
  }

  li {
    list-style: none;
    display: flex;
    flex-direction: column;
    line-height: 1;
  }

  .card {
    display: flex;
    flex-direction: column;
    padding: 0.5rem 1rem;
    background-color: #23262d;
    background-image: none;
    background-size: 400%;
    border-radius: 7px;
    background-position: 100%;
  }

  a {
    color: var(--color-white);
    text-decoration: none;
  }

  a:hover {
    opacity: 1;
    color: rgb(var(--accent-light));
  }

  .icon-wrapper {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .icon-wrapper > svg {
    margin-right: 0.25rem;
    margin-left: 0.25rem;
  }

  .link-wrapper {
    display: flex;
    flex-direction: row-reverse;
    justify-content: space-between;
    width: 25%;
    place-self: flex-end;
  }
</style>
